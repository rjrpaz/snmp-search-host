#!/usr/bin/perl
use strict;
use lib '.';
use TresSesentaNet;
use DBI;
use Net::SNMP qw(:snmp);
use Data::Dumper;
use IO::Interface::Simple;
use Net::ARP;
use Net::SSH::Perl;

my $switches;
my $aps;
my $ApUsuario = 'admin';
my $ApPassword = 'ws!2004erilink';
my $SshCmd = 'wlanconfig ath0 list station';
#my $result;
#my @columns = ();

#my %MacTable;
my %PuertoAnalizado;
my $MacBuscado;

my $OIDdot1dTpFdbTable = '1.3.6.1.2.1.17.4.3';

my $OIDdot1dTpFdbAddress = '1.3.6.1.2.1.17.4.3.1.1';
my $OIDdot1dTpFdbPort = '1.3.6.1.2.1.17.4.3.1.2';
my $OIDdot1dTpFdbStatus = '1.3.6.1.2.1.17.4.3.1.3';

if ($#ARGV < 0) {
        &usage();
}

#my @targets = @ARGV;
my %targets;
my %switch;
my %puerto;
foreach my $arg (@ARGV) {
	$targets{$arg} = $arg;
}

my @interfaces = IO::Interface::Simple->interfaces;


#
# Establezco los datos de los equipos que debo
# buscar ("targets"). El dato que se va a utilizar
# para encontrarlos, es la MAC address
#
print "\nAnalizando formato de los argumentos ...\n\n";
foreach my $target (keys %targets) {
	if ($target =~ m/^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$/) {
		print STDERR "IP Address: $target\n" if $debug;

		# Primero intento establecer conectividad con
		# el equipo destino, para que se genere la
		# entrada en la tabla ARP si este está arriba
		# Se utiliza el comando ping del SO, porque el
		# módulo de perl exige que se el script se ejecute
		# como root

		my $comando = "/bin/ping -c 1 -q $target >/dev/null";
		system($comando);

		# Luego barro la tabla ARP de todas las interfaces
		# hasta que encuentro el host, y puedo obtener su
		# MAC Adddress
		foreach my $if (@interfaces) {
			# Ignora loopback
			next if ($if eq 'lo');
			# Ignora alias
			next if ($if =~ /\:/);
			print STDERR "---->Buscando IP en interfaz $if\n" if $debug;

			my $mac = Net::ARP::arp_lookup($if,$target);
			if (($mac ne 'unknown') && ($mac ne '00:00:00:00:00:00')) {
				print STDERR "---->Reemplazando búsqueda por MAC Adddress $mac\n" if $debug;
				$mac =~ s/-//g;
				$mac =~ s/://g;
				$targets{$target} = uc($mac);
				last;
			}
		}
		if ($targets{$target} eq $target) {
			print STDERR "\n\nNo se encontró MAC address para $target. Saliendo\n\n";
			exit(0);
		}
	} elsif ($target =~ m/^(([0-9A-Fa-f][0-9A-Fa-f][-:]){5}[0-9A-Fa-f][0-9A-Fa-f])|(([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f].){2}[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])$/) {
		print STDERR "MAC Address: $target\n" if $debug;
		$targets{$target} =~ s/-//g;
		$targets{$target} =~ s/://g;
		$targets{$target} = uc($targets{$target});
#		print STDERR "MAC Address reformateado: $targets[$contador]\n" if $debug;
	} else {
		print STDERR "No se reconoció formato de $target. Saliendo\n\n";
		exit(0);
	}
}
print "\n\n";


#
# Obtiene los datos de los nodos que conforman
# la topología de red del sitio.
#
my $dbh = DBI->connect("DBI:mysql:$dbbase;host=$dbhost", $dbuser, $dbpass) || die "Could not connect to database: $DBI::errstr";

#my $sql_statement = "SELECT * FROM switches ORDER BY nombre";
my $sql_statement = "SELECT ip, nombre, conectado, snmpro as usuario FROM switches ORDER BY nombre";

my $sth = $dbh->prepare($sql_statement);
$sth->execute();

# Recorre la tabla con el listado de switchs, y obtiene
# la información de configuración relevante
if ($sth->rows == 0) {
	print STDERR "No se encontraron nodos de red definidos. El equipo buscado puede estar en cualquier lado\n\n";
	exit(0);
}

$switches = $sth->fetchall_hashref('nombre');
foreach my $switch (keys(%{$switches})) {
	$switches->{$switch}->{'es switch'} = 1;
}


#$sql_statement = "SELECT * FROM aps ORDER BY nombre";
$sql_statement = "SELECT ip, ubicacion as nombre, conectado, '$ApUsuario' as usuario FROM aps ORDER BY nombre";

$sth = $dbh->prepare($sql_statement);
$sth->execute();

# Recorre la tabla con el listado de switchs, y obtiene
# la información de configuración relevante
#if ($sth->rows == 0) {
#	print STDERR "No se encontraron nodos de red definidos. El equipo buscado puede estar en cualquier lado\n\n";
#	exit(0);
#}

$aps = $sth->fetchall_hashref('nombre');
foreach my $ap (keys(%{$aps})) {
	$aps->{$ap}->{'es switch'} = 0;
}
#print Dumper(%{$aps});

my %equipos = (%{$switches}, %{$aps}); 

#print Dumper(%equipos);
#exit;

foreach my $target (keys %targets) {
	$MacBuscado = $targets{$target};

	#
	# Para la primer búsqueda, propopngo un nodo
	# raiz de la topología de red
	#
	my @nodos_a_analizar = ();

	foreach my $equipo (keys(%equipos)) {
		if ($equipos{$equipo}->{'es switch'}) {
			print STDERR "Switch $equipos{$equipo}->{'nombre'} con IP $equipos{$equipo}->{'ip'}" if $debug;
		} else {
			print STDERR "AP $equipos{$equipo}->{'nombre'} con IP $equipos{$equipo}->{'ip'}" if $debug;
		}

		if ($equipos{$equipo}->{'conectado'} =~ m/eth/) {
			print STDERR " principal conectado a la interfaz $equipos{$equipo}->{'conectado'}\n" if $debug;

			# No puedo consultar equipo si no tiene IP de gestión
			next if ($equipos{$equipo}->{'ip'} !~ m/^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$/);

			# No puedo consultar si es switch y no tiene SNMP
			next if (($equipos{$equipo}->{'es switch'}) && ($equipos{$equipo}->{'usuario'} eq ''));

print STDERR "\n\nAGREGO $equipos{$equipo}->{'nombre'} con IP $equipos{$equipo}->{'ip'}\n" if $debug;
			push(@nodos_a_analizar,  $equipos{$equipo}->{'nombre'});
		} else {
			print STDERR " conectado en cascada al equipo $equipos{$equipo}->{'conectado'}\n" if $debug;
		}
		if ($equipos{$equipo}->{'usuario'} eq '') {
			if ($equipos{$equipo}->{'es switch'}) {
				print STDERR "---->(no tiene SNMP)\n" if $debug;
			} else {
				print STDERR "---->(no tiene usuario administrador)\n" if $debug;
			}
		} else {
			if ($equipos{$equipo}->{'es switch'}) {
				print STDERR "---->SNMP ro: $equipos{$equipo}->{'usuario'}\n" if $debug;
			} else {
				print STDERR "---->ADMIN: $equipos{$equipo}->{'usuario'}\n" if $debug;
			}
		}
	}

#	print "SON ".scalar @nodos_a_analizar."\n";
#exit;
	if ((scalar @nodos_a_analizar) == 0) {
		print STDERR "No se encontraron nodos raiz en la topología de red. No se puede empezar la búsquead\n\n";
		exit(0);
	}

	#print Dumper(@nodos_a_analizar) if $debug;
	my $equipo_analizado = $nodos_a_analizar[0];

	# Repite el proceso mientras haya un equipo propuesto
	# para seguir buscando
	while ($equipo_analizado ne '') {
		print STDERR "Analizando equipo $equipo_analizado con IP $equipos{$equipo_analizado}->{'ip'}\n";
		if ($equipos{$equipo_analizado}->{'es switch'}) {
		
			print STDERR "-------->TABLA MAC:\n" if $debug;
			my ($session, $error) = Net::SNMP->session(
				-version  => 'snmpv2c',
				-nonblocking  => 1,
				-hostname  => $equipos{$equipo_analizado}->{'ip'},
				-community => $equipos{$equipo_analizado}->{'usuario'}
			);
			if (!defined $session) {
				print "Error en consulta SNMP:\t$error\n";
				exit(-1);
			} 
			my $result = $session->get_bulk_request(
				-callback       => [\&table_cb, {}],
				-maxrepetitions => 10,
				-varbindlist    => [$OIDdot1dTpFdbTable]
			);

			if (!defined $result) {
				printf "ERROR: %s\n", $session->error();
				$session->close();
				exit (-1);
			}

			snmp_dispatcher();
    			$session->close();


			if (defined(\%PuertoAnalizado)) {
				printf("\nEl equipo fue encontrado en el puerto %s del switch %s (%s).\n", $PuertoAnalizado{'puerto'}, $equipo_analizado, $PuertoAnalizado{'nombre'});
				if ($PuertoAnalizado{'cantidad de hosts'} == 1) {
					exit(0);
				} else {
					printf("\nLa cantidad de equipos conectados a ese puerto es de %s en total. Se sigue buscando.\n", $PuertoAnalizado{'cantidad de hosts'});
					@nodos_a_analizar = ();

					# Recorre la lista de equipos para determinar
					# cuales están conectados al equipo encontrado
					foreach my $equipo (keys(%equipos)) {
						print STDERR "Switch $equipos{$equipo}->{'nombre'} con IP $equipos{$equipo}->{'ip'} conectado a $equipos{$equipo}->{'conectado'}\n" if $debug;
#						if ($switches->{$switch}->{'conectado'} eq $PuertoAnalizado{'nombre'}) {
						if ($equipos{$equipo}->{'conectado'} eq $equipo_analizado) {
							print STDERR "Equipo $equipos{$equipo}->{'nombre'} con IP $equipos{$equipo}->{'ip'} conectado al equipo $equipos{$equipo}->{'conectado'}\n" if $debug;
							# No puedo consultar equipo si no tiene IP de gestión
							next if ($equipos{$equipo}->{'ip'} !~ m/^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$/);

							# No puedo consultar si es switch y no tiene SNMP
							next if (($equipos{$equipo}->{'es switch'}) && ($equipos{$equipo}->{'usuario'} eq ''));

							push(@nodos_a_analizar,  $equipos{$equipo}->{'nombre'});
						}
					}

					if ((scalar @nodos_a_analizar) == 0) {
						print STDERR "\n\n$target no se encontró. Existe un nodo no declarado o no administrable conectado al puerto $PuertoAnalizado{'puerto'} del equipo $equipo_analizado ($PuertoAnalizado{'nombre'})\n\n";
						exit(0);
					}

	#print Dumper(@nodos_a_analizar) if $debug;
					$equipo_analizado = $nodos_a_analizar[0];
					print STDERR "\n\nSe continua buscando $target en el equipo $equipo_analizado\n\n";
				}
			} else {
				my $trash = shift @nodos_a_analizar;

				if ((scalar @nodos_a_analizar) == 0) {
					print STDERR "\n\n$target no se encontró. Existe un nodo no declarado o no administrable conectado al puerto $PuertoAnalizado{'puerto'} del equipo $equipo_analizado ($PuertoAnalizado{'nombre'})\n\n";
					exit(0);
				}

	#print Dumper(@nodos_a_analizar) if $debug;
				$equipo_analizado = $nodos_a_analizar[0];
				print STDERR "\n\nSe continua buscando $target en el equipo $equipo_analizado\n\n";

			}

		} else {
			print "Es un AP. Saliendo.\n\n";
			my $ssh = Net::SSH::Perl->new($equipos{$equipo_analizado}->{'ip'}, debug=>0);
#			my $ssh = Net::SSH::Perl->new('10.0.13.105', debug=>0);
			$ssh->login($equipos{$equipo_analizado}->{'usuario'},$ApPassword);
			my ($stdout,$stderr,$exit) = $ssh->cmd($SshCmd);
			print "Comando.\n\n";
			my @lines = split /\n/, $stdout;
			foreach my $line (@lines) {
				next if ($line =~ /^ADDR/);
				(my $convertida) = ($line =~ /^([^\s]*)/);
				$convertida =~ s/://g;
				$convertida = uc($convertida);
#			print "$convertida\n";
				if ($convertida eq $MacBuscado) {
					printf("\nEl equipo está conectao por wi-fi al AP ubicado en %s (%s).\n", $equipos{$equipo_analizado}->{'nombre'}, $equipos{$equipo_analizado}->{'ip'});
					exit(0);
				}
			}
			my $trash = shift @nodos_a_analizar;

			if ((scalar @nodos_a_analizar) == 0) {
				print STDERR "\n\n$target no se encontró. Existe un nodo no declarado o no administrable conectado al puerto $PuertoAnalizado{'puerto'} del equipo $equipo_analizado ($PuertoAnalizado{'nombre'})\n\n";
				exit(0);
			}

	#print Dumper(@nodos_a_analizar) if $debug;
			$equipo_analizado = $nodos_a_analizar[0];
			print STDERR "\n\nSe continua buscando $target en el equipo $equipo_analizado\n\n";

		}

















































	}
}





exit;


sub usage
{

        print <<END;

Uso:

        $0 [<IP1> [<IP2>] ... [<MAC1>] [<MAC2>] ... ]

Ej:
        $0 10.0.14.105
                (busca equipo con dirección IP 10.0.14.105)

        $0 00:27:22:a6:1b:51
                (busca equipo con dirección MAC 00:27:22:a6:1b:51)

        $0 10.0.14.105 10.0.14.111
                (busca equipos con direcciones IP 10.0.14.105 y 10.0.14.111)


END
        exit(0);
}



sub table_cb
{
	my ($session, $table) = @_;

	if (!defined($session->var_bind_list)) {
		printf("ERROR: %s\n", $session->error);
	} else {
		# Loop through each of the OIDs in the response and assign
		# the key/value pairs to the anonymous hash that is passed
		# to the callback.  Make sure that we are still in the table
		# before assigning the key/values.

		my $next;

		foreach my $oid (oid_lex_sort(keys(%{$session->var_bind_list}))) {
			if (!oid_base_match($OIDdot1dTpFdbTable, $oid)) {
				$next = undef;
				last;
			}
			$next = $oid;
			$table->{$oid} = $session->var_bind_list->{$oid};
		}

		# If $next is defined we need to send another request
		# to get more of the table.

		if (defined($next)) {

			my $result = $session->get_bulk_request(
				-callback       => [\&table_cb, $table],
				-maxrepetitions => 10,
				-varbindlist    => [$next]
			);

			if (!defined($result)) {
				printf("ERROR: %s\n", $session->error);
			}
		} else {
			# We are no longer in the table, so print the results.
			my %MacTable;
			my %HostPorPuerto = ();
			foreach my $oid (oid_lex_sort(keys(%{$table}))) {
#				printf("%s %s\n", $oid, $OIDdot1dTpFdbAddress);
				if ($oid =~ m/^$OIDdot1dTpFdbAddress/) {

					(my $llave) = ($oid =~ /^$OIDdot1dTpFdbAddress\.(.*)/);
					(my $temp) = ($table->{$oid} =~ /^0x(.*)/);
#printf("MAC %s\n", $temp);
#					$MacTable{$session->hostname}{$llave}{'Address'} = uc($temp);
					$MacTable{$llave}{'Address'} = uc($temp);
				} elsif ($oid =~ m/^$OIDdot1dTpFdbPort/) {
					(my $llave) = ($oid =~ /^$OIDdot1dTpFdbPort\.(.*)/);
#					$MacTable{$session->hostname}{$llave}{'Port'} = $table->{$oid};
					$MacTable{$llave}{'Port'} = $table->{$oid};

					if (defined($HostPorPuerto{$table->{$oid}}) && ($HostPorPuerto{$table->{$oid}} =~ m/\d+/)) {
						$HostPorPuerto{$table->{$oid}} = $HostPorPuerto{$table->{$oid}} + 1;
					} else {
						$HostPorPuerto{$table->{$oid}} = 0;
					}
				} elsif ($oid =~ m/^$OIDdot1dTpFdbStatus/) {
					(my $llave) = ($oid =~ /^$OIDdot1dTpFdbStatus\.(.*)/);
#					$MacTable{$session->hostname}{$llave}{'Status'} = $table->{$oid};
					$MacTable{$llave}{'Status'} = $table->{$oid};
				}
#				printf("%s => %s\n", $oid, $table->{$oid});
			}

			foreach my $key (keys %MacTable) {
				if ($MacBuscado eq $MacTable{$key}{'Address'}) {
					$PuertoAnalizado{'nombre'} = $session->hostname;
					$PuertoAnalizado{'puerto'} = $MacTable{$key}{'Port'};
					$PuertoAnalizado{'cantidad de hosts'} = $HostPorPuerto{$MacTable{$key}{'Port'}};
					return;
				}
			}
		}
	}
}

