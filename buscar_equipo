#!/usr/bin/perl
use strict;
use lib '.';
use TresSesentaNet;
use DBI;
use Net::SNMP qw(:snmp);
use Data::Dumper;
use IO::Interface::Simple;
use Net::ARP;

my $switches;
#my $result;
#my @columns = ();

my %MacTable;

my $OIDdot1dTpFdbTable = '1.3.6.1.2.1.17.4.3';

my $OIDdot1dTpFdbAddress = '1.3.6.1.2.1.17.4.3.1.1';
my $OIDdot1dTpFdbPort = '1.3.6.1.2.1.17.4.3.1.2';
my $OIDdot1dTpFdbStatus = '1.3.6.1.2.1.17.4.3.1.3';

if ($#ARGV < 0) {
        &usage();
}

#my @targets = @ARGV;
my %targets;
my %switch;
my %puerto;
foreach my $arg (@ARGV) {
	$targets{$arg} = $arg;
}

my @interfaces = IO::Interface::Simple->interfaces;

print "\nAnalizando formato de los argumentos ...\n\n";
foreach my $target (keys %targets) {
	if ($target =~ m/^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$/) {
		print STDERR "IP Address: $target\n" if $debug;

		# Primero intento establecer conectividad con
		# el equipo destino, para que se genere la
		# entrada en la tabla ARP si este está arriba
		# Se utiliza el comando ping del SO, porque el
		# módulo de perl exige que se el script se ejecute
		# como root

		my $comando = "/bin/ping -c 1 -q $target >/dev/null";
		system($comando);

		# Luego barro la tabla ARP de todas las interfaces
		# hasta que encuentro el host, y puedo obtener su
		# MAC Adddress
		foreach my $if (@interfaces) {
			# Ignora loopback
			next if ($if eq 'lo');
			# Ignora alias
			next if ($if =~ /\:/);
			print STDERR "---->Buscando IP en interfaz $if\n" if $debug;

			my $mac = Net::ARP::arp_lookup($if,$target);
			if ($mac ne 'unknown') {
				print STDERR "---->Reemplazando búsqueda por MAC Adddress $mac\n" if $debug;
				$mac =~ s/-//g;
				$mac =~ s/://g;
				$targets{$target} = uc($mac);
				last;
			}
		}
	} elsif ($target =~ m/^(([0-9A-Fa-f][0-9A-Fa-f][-:]){5}[0-9A-Fa-f][0-9A-Fa-f])|(([0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f].){2}[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f])$/) {
		print STDERR "MAC Address: $target\n" if $debug;
		$targets{$target} =~ s/-//g;
		$targets{$target} =~ s/://g;
		$targets{$target} = uc($targets{$target});
#		print STDERR "MAC Address reformateado: $targets[$contador]\n" if $debug;
	} else {
		print STDERR "No se reconoció formato de $target. Saliendo\n\n";
		exit(0);
	}
}
print "\n\n";

my $dbh = DBI->connect("DBI:mysql:$dbbase;host=$dbhost", $dbuser, $dbpass) || die "Could not connect to database: $DBI::errstr";

my $sql_statement = "SELECT * FROM switches ORDER BY nombre";

my $sth = $dbh->prepare($sql_statement);
$sth->execute();

# Recorre la tabla con el listado de switchs, y obtiene
# la información de configuración relevante
if ($sth->rows != 0) {
	$switches = $sth->fetchall_hashref('nombre');
	foreach my $switch (keys(%{$switches})) {
		print STDERR "Switch $switches->{$switch}->{'nombre'} con IP $switches->{$switch}->{'ip'}" if $debug;

		if ($switches->{$switch}->{'conectado'} =~ m/eth/) {
			print STDERR " principal conectado a la interfaz $switches->{$switch}->{'conectado'}\n" if $debug;
		} else {
			print STDERR " conectado en cascada al switch $switches->{$switch}->{'conectado'}\n" if $debug;
		}

		if ($switches->{$switch}->{'snmpro'} eq '') {
			print STDERR "---->(no tiene SNMP)\n" if $debug;
		} else {
			print STDERR "---->SNMP ro: $switches->{$switch}->{'snmpro'}\n" if $debug;
			print STDERR "-------->TABLA MAC:\n" if $debug;
			my ($session, $error) = Net::SNMP->session(
				-version  => 'snmpv2c',
				-nonblocking  => 1,
				-hostname  => $switches->{$switch}->{'ip'},
				-community => $switches->{$switch}->{'snmpro'}
			);
			if (!defined $session) {
				print "Error en consulta SNMP:\t$error\n";
				exit(-1);
			} else {
				my $result = $session->get_bulk_request(
					-callback       => [\&table_cb, {}],
					-maxrepetitions => 10,
					-varbindlist    => [$OIDdot1dTpFdbTable]
				);

				if (!defined $result) {
					printf "ERROR: %s\n", $session->error();
					$session->close();
					exit (-1);
				}

				snmp_dispatcher();
			}
    			$session->close();
		}
	}

} else {
	print STDERR "No se encontraron switches\n" if $debug;
}













exit;


sub usage
{

        print <<END;

Uso:

        $0 [<IP1> [<IP2>] ... [<MAC1>] [<MAC2>] ... ]

Ej:
        $0 10.0.14.105
                (busca equipo con dirección IP 10.0.14.105)

        $0 00:27:22:a6:1b:51
                (busca equipo con dirección MAC 00:27:22:a6:1b:51)

        $0 10.0.14.105 10.0.14.111
                (busca equipos con direcciones IP 10.0.14.105 y 10.0.14.111)


END
        exit(0);
}



sub table_cb
{
	my ($session, $table) = @_;

	if (!defined($session->var_bind_list)) {
		printf("ERROR: %s\n", $session->error);
	} else {
		# Loop through each of the OIDs in the response and assign
		# the key/value pairs to the anonymous hash that is passed
		# to the callback.  Make sure that we are still in the table
		# before assigning the key/values.

		my $next;

		foreach my $oid (oid_lex_sort(keys(%{$session->var_bind_list}))) {
			if (!oid_base_match($OIDdot1dTpFdbTable, $oid)) {
				$next = undef;
				last;
			}
			$next = $oid;
			$table->{$oid} = $session->var_bind_list->{$oid};
		}

		# If $next is defined we need to send another request
		# to get more of the table.

		if (defined($next)) {

			my $result = $session->get_bulk_request(
				-callback       => [\&table_cb, $table],
				-maxrepetitions => 10,
				-varbindlist    => [$next]
			);

			if (!defined($result)) {
				printf("ERROR: %s\n", $session->error);
			}
		} else {
			# We are no longer in the table, so print the results.
			foreach my $oid (oid_lex_sort(keys(%{$table}))) {
#				printf("%s %s\n", $oid, $OIDdot1dTpFdbAddress);
				if ($oid =~ m/^$OIDdot1dTpFdbAddress/) {
					(my $key) = ($oid =~ /^$OIDdot1dTpFdbAddress\.(.*)/);
					my $temp = ($table->{$oid} =~ /^0x(.*)/);
					$MacTable{$session->hostname}{$key}{'Address'} = uc($temp);
				} elsif ($oid =~ m/^$OIDdot1dTpFdbPort/) {
					(my $key) = ($oid =~ /^$OIDdot1dTpFdbPort\.(.*)/);
					$MacTable{$session->hostname}{$key}{'Port'} = $table->{$oid};
				} elsif ($oid =~ m/^$OIDdot1dTpFdbStatus/) {
					(my $key) = ($oid =~ /^$OIDdot1dTpFdbStatus\.(.*)/);
					$MacTable{$session->hostname}{$key}{'Status'} = $table->{$oid};
				}

#				printf("%s => %s\n", $oid, $table->{$oid});
			}

#			foreach my $key (keys %MacTable) {
#				foreach my $target (keys %targets) {
#					if ($targets{$target} eq $MacTable{$key}{'Address'}) {
##						printf("%s ===> A: %s P: %s S: %s\n", $key, $MacTable{$key}{'Address'}, $MacTable{$key}{'Port'}, $MacTable{$key}{'Status'});
#						printf("El equipo con dirección %s fue encontrado en el puerto %s del switch %s\n", $target, $MacTable{$key}{'Port'}, $session->hostname);
#						$switch{$target} = $session->hostname;
#						$puerto{$target} = $MacTable{$key}{'Port'};
#						
#					}
#				}
#			}
		}
	}
}

